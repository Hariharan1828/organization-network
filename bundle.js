(function (d3) {
  'use strict';

  // Generated with https://paletton.com/#uid=75x0u0kigkU8ZuBdTpdmbh6rjc7
  const colors = [
    ['#9D4452', '#E6A6B0', '#BE6B78', '#812836', '#5B0D1A'],
    ['#A76C48', '#F4CAAF', '#C99372', '#884E2A', '#602E0E'],
    ['#2E6B5E', '#719D93', '#498175', '#1B584A', '#093E32'],
    ['#538E3D', '#A6D096', '#75AC61', '#3A7424', '#1F520C'],
  ];

  const prakash = {id:'Name1', image: "https://i1.wp.com/www.coffeenancy.com/wordpress/wp-content/uploads/2015/03/circlesunset1.png" , designation:"Lead", monthsknown: 10, textoffset: 70, subtextOffset: 90, imageOffset: 1.9};
  const gnana = {id:'Name2', image: "https://tse1.mm.bing.net/th?id=OIP.noXt7512Uyo2hOKMweAt_wHaHJ&pid=Api&P=0&h=180",  textoffset: 150, subtextOffset: 35, imageOffset: 2.5};
  const pramesh = {id:'Name3',image: "https://tse1.mm.bing.net/th?id=OIP.noXt7512Uyo2hOKMweAt_wHaHJ&pid=Api&P=0&h=180",  textoffset: 70, subtextOffset: 30, imageOffset:0.7};

  const nodes = [];
  const links = [];

  let MAIN_NODE_SIZE = 50;
  let CHILD_NODE_SIZE = 25;
  const MAIN_NODE_DISTANCE = 90;
  // const LEAF_NODE_DISTANCE = 30;
  const MANY_BODY_STRENGTH = -20;

  let i =0;

  const addMainNode = (node, size= MAIN_NODE_SIZE) => {
    node.size = MAIN_NODE_SIZE;
    node.color = colors[i++][1];

    nodes.push(node);
  };

  const connectMainNodes = (source, target, relationshipText,thickness = 1) => {
    links.push({
      source,
      target,
      distance: MAIN_NODE_DISTANCE,
      color: source.color,
      relationship: relationshipText,
      thickness,
    });
  };



  addMainNode(prakash);

  addMainNode(gnana);


  addMainNode(pramesh);




  // let relationshipText = `${prakash.id} - ${gnana.id}`;
  connectMainNodes(prakash, gnana, 'Worked togther in the past', 3 );
  connectMainNodes(prakash, pramesh, 'Worked' );
  connectMainNodes(pramesh, gnana, "heiii");


  const nodeSizes = {
  	Name1:80,
    Name2:80*1.2,
    name3:80*1.7
  };


  const defaultNodeSize = CHILD_NODE_SIZE;







  // const artsWeb = { id: 'Arts Web' };
  // addMainNode(artsWeb);
  // assembleChildNode(artsWeb, 'Community Vision');
  // assembleChildNode(artsWeb, 'Silicon Valley Creates');

  // const socialImpactCommons = { id: 'Social Impact Commons' };
  // addMainNode(socialImpactCommons);
  // assembleChildNode(socialImpactCommons, 'Theatre Bay Area');
  // assembleChildNode(socialImpactCommons, 'EastSide Arts Alliance');
  // assembleChildNode(socialImpactCommons, 'Local Color');

  // const cast = { id: 'Community Arts Stabilization Trust' };
  // addMainNode(cast);
  // assembleChildNode(cast, 'CounterPulse');
  // assembleChildNode(cast, 'Luggage Store Gallery');
  // assembleChildNode(cast, 'Performing Arts Workshop');
  // assembleChildNode(cast, '447 Minna St.', 5);
  // assembleChildNode(cast, 'Keeping Space Oakland');

  // const ambitioUS = { id: 'AmbitioUS' };
  // addMainNode(ambitioUS);
  // assembleChildNode(ambitioUS, 'EBPREC');
  // assembleChildNode(ambitioUS, 'SELC', 3);
  // assembleChildNode(ambitioUS, 'The Runway Project', 3);
  // assembleChildNode(ambitioUS, 'Common Future', 3);
  // assembleChildNode(ambitioUS, 'Freelancers Union', 3);
  // assembleChildNode(ambitioUS, 'US Federation of Worker Cooperatives', 3);

  // connectMainNodes(artsWeb, socialImpactCommons);
  // connectMainNodes(artsWeb, cast);
  // connectMainNodes(socialImpactCommons, cast);
  // connectMainNodes(ambitioUS, cast);
  // connectMainNodes(ambitioUS, socialImpactCommons);
  // connectMainNodes(ambitioUS, artsWeb);

  //svg needs
  const svg = d3.select('#container');
  const width = +svg.attr('width');
  const height = +svg.attr('height');
  const centerX = width / 2;
  const centerY = height / 2;

  //zoom functions
  const zoomBehavior = d3.zoom().on('zoom', zoomed);

  svg.call(zoomBehavior);

  function zoomed(event) {
    svg.attr('transform', event.transform);
  }

  //for simulation
  const simulation = d3.forceSimulation(nodes)
    .force(
      'charge',
      d3.forceManyBody().strength(MANY_BODY_STRENGTH)
    )
    .force(
      'link',
      d3.forceLink(links).distance(
        (link) => link.distance
      )
    ) //ex
    .force('center', d3.forceCenter(centerX, centerY));

  //for dragging
  const dragInteraction = d3.drag().on(
    'drag',
    (event, node) => {
      node.fx = event.x;
      node.fy = event.y;
      simulation.alpha(1);
      simulation.restart();
    }
  );

  //creating lines and varible the thickness
  const lines = svg
    .selectAll('line')
    .data(links)
    .enter()
    .append('line')
    .attr('stroke', 'gray')
    .attr(
      'stroke-width',
      (link) => link.thickness || 1
    );

  //realtionship between the nodes are defined as linklabels
  const labels = svg
    .selectAll('.link-label')
    .data(links)
    .enter()
    .append('text')
    .attr('class', 'link-label')
    .attr('text-anchor', 'middle')
    .attr('dy', -5)
    .attr('dx', -5)
    .text((link) => link.relationship);

  // const images = svg
  //   .selectAll('image')
  //   .data(nodes)
  //   .enter()
  //   .append('image')
  //   .attr('xlink:href', (node) => node.image)
  //   .attr('x', (node) => node.x - node.size / 2)
  //   .attr('y', (node) => node.y - node.size / 2)
  //   .attr('width', (node) => node.size)
  //   .attr('height', (node) => node.size)
  //   .attr('clip-path', `circle(${defaultNodeSize / 2}px)`);

  //node structure is given as circles
  const circles = svg
    .selectAll('circle')
    .data(nodes)
    .enter() //ex
    .append('circle')
    .attr('fill', (node) => node.color || 'gray')
    .attr(
      'r',
      (node) =>
        nodeSizes[node.id] || defaultNodeSize
    )
    .call(dragInteraction);

  //image element in svg with clip-path to palce it centre the circle
  const images = svg
    .selectAll('image')
    .data(nodes)
    .enter()
    .append('image')
    .attr('xlink:href', (node) => node.image)
    .attr('x', (node) => node.x - (node.size * 0.7) / 2)  // Adjust x position to center the image
    .attr('y', (node) => node.y - (node.size * 0.7) / 2)  // Adjust y position to center the image
    .attr('width', (node) => node.size * 0.7)  // Adjust width to 70% of node size
    .attr('height', (node) => node.size * 0.7)  // Adjust height to 70% of node size
    .call(dragInteraction);

  // images
  //   .append('clipPath')
  //   .attr('id', (node, i) => `clip-${i}`)
  //   .append('circle')
  //   .attr('r', (node) => node.size / 2)
  //   .attr('cx', (node) => node.size / 2)
  //   .attr('cy', (node) => node.size / 2);

  // images
  //   .attr(
  //     'clip-path',
  //     (node, i) => `url(#clip-${i})`
  //   )
  //   .append('circle')
  //   .attr('r', (node) => node.size / 2)
  //   .attr('fill', 'none')
  //   .attr('stroke', 'gray');

  const text = svg
    .selectAll('.node-label')
    .data(nodes)
    .enter()
    .append('text')
    .attr('class', 'node-label')
    .attr('text-anchor', 'middle')
    .attr('alignment-baseline', 'middle')
    .style('pointer-events', 'none')
    .style('font-weight', 'bold')
    .style('font-family', 'Arial')
    .style('font-size', (node) =>
      Math.min(node.size / 3, 18)
    ) // Adjust the division and maximum font size as needed
    .text((node) => node.id)
    .attr('x', (node) => node.x)
    .attr('y', (node) => node.y);

  const subtext = svg
    .selectAll('.node-sublabel')
    .data(nodes)
    .enter()
    .append('text')
    .attr('class', 'node-sublabel')
    .attr('text-anchor', 'middle')
    .attr('alignment-baseline', 'middle')
    .style('pointer-events', 'none')
    .style('font-size', '12px')
    .style('font-family', 'Arial')
    .attr('x', (node) => node.x)
    .attr('y', (node) => node.y)
    .text((node) => node.designation);

  //simulation
  simulation.on('tick', () => {
    circles
      .attr('cx', (node) => node.x)
      .attr('cy', (node) => node.y);
    text
      .attr('x', (node) => node.x)
      .attr(
        'y',
        (node) =>
          node.y + node.size / 2 + node.textoffset
      )
      .style('font-size', (node) =>
        Math.min(node.size / 1.5, 1000)
      ); // Adjust the division and maximum font size as needed

    subtext
      .attr('x', (node) => node.x)
      .attr(
        'y',
        (node) =>
          node.y +
          node.size / 2 +
          node.subtextOffset
      )
      .style('font-size', (node) =>
        Math.min(node.size / 3, 1000)
      ); // Adjust the division and maximum font size as needed

    lines
      .attr('x1', (link) => link.source.x)
      .attr('y1', (link) => link.source.y)
      .attr('x2', (link) => link.target.x)
      .attr('y2', (link) => link.target.y)
      .attr(
        'stroke-width',
        (link) => link.thickness || 1
      );

    labels
      .attr(
        'x',
        (link) =>
          (link.source.x + link.target.x) / 2
      )
      .attr(
        'y',
        (link) =>
          (link.source.y + link.target.y) / 2
      );
    images
      .attr('x', (node) => node.x - (node.size *node.imageOffset) / 2)  // Adjust x position to center the image
      .attr('y', (node) => node.y - (node.size *node.imageOffset) / 2)  // Adjust y position to center the image
      .attr('width', (node) => node.size *node.imageOffset)  // Adjust width to 70% of node size
      .attr('height', (node) => node.size *node.imageOffset);  // Adjust height to 70% of node size

  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,